{"ast":null,"code":"var _jsxFileName = \"/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/TestImage.js\";\nimport React, { useRef, useMemo } from 'react';\nimport { uApi } from '../../components/utils.js';\nimport { useFrame } from 'react-three-fiber';\nvar fragmentShader = \"\\n  uniform sampler2D image;\\n\\n  uniform float brightness;\\n  uniform float contrast;\\n  varying vec2 vUv;\\n  void main() {\\n    gl_FragColor = texture2D(image, vUv);\\n    gl_FragColor.rgb += brightness;\\n\\n    if (contrast > 90.0) {\\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\\n    } else {\\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\\n    }\\n  }\\n\";\nvar vertexShader = \"\\n  varying vec2 vUv;\\n\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\\n\";\n\nfunction Image() {\n  var material = useRef();\n  var uniforms = useMemo(function () {\n    return uApi.getState().uniforms;\n  }, []);\n  useFrame(function (state) {\n    material.current.uniforms.brightness.value = uApi.getState().uniforms.brightness.value;\n    material.current.uniforms.contrast.value = uApi.getState().uniforms.contrast.value;\n  });\n  return React.createElement(\"mesh\", {\n    scale: [1.0, 1.0, 1.0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [5.0, 5.0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(\"shaderMaterial\", {\n    attach: \"material\",\n    ref: material,\n    fragmentShader: fragmentShader,\n    vertexShader: vertexShader,\n    uniforms: uniforms,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }));\n}\n\nexport default Image;","map":{"version":3,"sources":["/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/TestImage.js"],"names":["React","useRef","useMemo","uApi","useFrame","fragmentShader","vertexShader","Image","material","uniforms","getState","state","current","brightness","value","contrast"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,SAASC,IAAT,QAAqB,2BAArB;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AAEA,IAAMC,cAAc,qaAApB;AAkBA,IAAMC,YAAY,kJAAlB;;AASA,SAASC,KAAT,GAAiB;AAEf,MAAMC,QAAQ,GAAGP,MAAM,EAAvB;AAEA,MAAIQ,QAAQ,GAAGP,OAAO,CACpB;AAAA,WACEC,IAAI,CAACO,QAAL,GAAgBD,QADlB;AAAA,GADoB,EAGpB,EAHoB,CAAtB;AAMAL,EAAAA,QAAQ,CAAC,UAAAO,KAAK,EAAI;AAChBH,IAAAA,QAAQ,CAACI,OAAT,CAAiBH,QAAjB,CAA0BI,UAA1B,CAAqCC,KAArC,GAA6CX,IAAI,CAACO,QAAL,GAAgBD,QAAhB,CAAyBI,UAAzB,CAAoCC,KAAjF;AACAN,IAAAA,QAAQ,CAACI,OAAT,CAAiBH,QAAjB,CAA0BM,QAA1B,CAAmCD,KAAnC,GAA2CX,IAAI,CAACO,QAAL,GAAgBD,QAAhB,CAAyBM,QAAzB,CAAkCD,KAA7E;AACD,GAHO,CAAR;AAKA,SACE;AAAM,IAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,GAAG,EAAEN,QAFP;AAGE,IAAA,cAAc,EAAEH,cAHlB;AAIE,IAAA,YAAY,EAAEC,YAJhB;AAKE,IAAA,QAAQ,EAAEG,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAYD;;AAED,eAAeF,KAAf","sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { uApi } from '../../components/utils.js'\nimport {useFrame} from 'react-three-fiber'\n\nconst fragmentShader = `\n  uniform sampler2D image;\n\n  uniform float brightness;\n  uniform float contrast;\n  varying vec2 vUv;\n  void main() {\n    gl_FragColor = texture2D(image, vUv);\n    gl_FragColor.rgb += brightness;\n\n    if (contrast > 90.0) {\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\n    } else {\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\n    }\n  }\n`;\n\nconst vertexShader = `\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n`;\n\nfunction Image() {\n\n  const material = useRef()\n\n  var uniforms = useMemo(\n    () =>\n      uApi.getState().uniforms,\n    []\n  )\n\n  useFrame(state => {\n    material.current.uniforms.brightness.value = uApi.getState().uniforms.brightness.value;\n    material.current.uniforms.contrast.value = uApi.getState().uniforms.contrast.value;\n  })\n\n  return (\n    <mesh scale={[1.0, 1.0, 1.0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[5.0, 5.0]} />\n      <shaderMaterial\n        attach=\"material\"\n        ref={material}\n        fragmentShader={fragmentShader}\n        vertexShader={vertexShader}\n        uniforms={uniforms}\n      />\n    </mesh>\n  )\n}\n\nexport default Image;\n\n"]},"metadata":{},"sourceType":"module"}