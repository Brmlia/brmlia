{"ast":null,"code":"var _jsxFileName = \"/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/Mesh.js\";\nimport React, { useRef, useMemo } from 'react';\nimport { fApi, uApi } from '../utils/index.js';\nimport { useFrame } from 'react-three-fiber';\nimport '../styles.css';\nvar fragmentShader = \"\\n  uniform sampler2D image;\\n\\n  uniform float brightness;\\n  uniform float contrast;\\n  varying vec2 vUv;\\n  void main() {\\n    gl_FragColor = texture2D(image, vUv);\\n    gl_FragColor.rgb += brightness;\\n\\n    if (contrast > 0.0) {\\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\\n    } else {\\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\\n    }\\n  }\\n\";\nvar vertexShader = \"\\n  varying vec2 vUv;\\n\\n  void main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n  }\\n\";\n\nfunction Mesh(props) {\n  var ref = useRef();\n  var material = useRef();\n  var uniforms = useMemo(function () {\n    return uApi.getState().channels[props.channel - 1].uniforms;\n  }, []);\n  useFrame(function (state) {\n    material.current.uniforms.brightness.value = uApi.getState().channels[props.channel - 1].uniforms.brightness.value;\n    material.current.uniforms.contrast.value = uApi.getState().channels[props.channel - 1].uniforms.contrast.value;\n    material.current.uniforms.image.value = uApi.getState().channels[props.channel - 1].uniforms.image.value;\n  });\n  return React.createElement(\"mesh\", {\n    ref: ref,\n    scale: [1.0, 1.0, 1.0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [5.0, 5.0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"shaderMaterial\", {\n    attach: \"material\",\n    ref: material,\n    fragmentShader: fragmentShader,\n    vertexShader: vertexShader,\n    uniforms: uniforms,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }));\n}\n\nexport default Mesh;","map":{"version":3,"sources":["/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/Mesh.js"],"names":["React","useRef","useMemo","fApi","uApi","useFrame","fragmentShader","vertexShader","Mesh","props","ref","material","uniforms","getState","channels","channel","state","current","brightness","value","contrast","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,OAAxB,QAAuC,OAAvC;AACA,SAASC,IAAT,EAAeC,IAAf,QAA2B,mBAA3B;AACA,SAAQC,QAAR,QAAuB,mBAAvB;AACA,OAAO,eAAP;AAEA,IAAMC,cAAc,oaAApB;AAkBA,IAAMC,YAAY,kJAAlB;;AASA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAEnB,MAAMC,GAAG,GAAGT,MAAM,EAAlB;AACA,MAAMU,QAAQ,GAAGV,MAAM,EAAvB;AAEA,MAAIW,QAAQ,GAAGV,OAAO,CACpB;AAAA,WACEE,IAAI,CAACS,QAAL,GAAgBC,QAAhB,CAAyBL,KAAK,CAACM,OAAN,GAAc,CAAvC,EAA0CH,QAD5C;AAAA,GADoB,EAGpB,EAHoB,CAAtB;AAMAP,EAAAA,QAAQ,CAAC,UAAAW,KAAK,EAAI;AAChBL,IAAAA,QAAQ,CAACM,OAAT,CAAiBL,QAAjB,CAA0BM,UAA1B,CAAqCC,KAArC,GAA6Cf,IAAI,CAACS,QAAL,GAAgBC,QAAhB,CAAyBL,KAAK,CAACM,OAAN,GAAc,CAAvC,EAA0CH,QAA1C,CAAmDM,UAAnD,CAA8DC,KAA3G;AACAR,IAAAA,QAAQ,CAACM,OAAT,CAAiBL,QAAjB,CAA0BQ,QAA1B,CAAmCD,KAAnC,GAA2Cf,IAAI,CAACS,QAAL,GAAgBC,QAAhB,CAAyBL,KAAK,CAACM,OAAN,GAAc,CAAvC,EAA0CH,QAA1C,CAAmDQ,QAAnD,CAA4DD,KAAvG;AACAR,IAAAA,QAAQ,CAACM,OAAT,CAAiBL,QAAjB,CAA0BS,KAA1B,CAAgCF,KAAhC,GAAwCf,IAAI,CAACS,QAAL,GAAgBC,QAAhB,CAAyBL,KAAK,CAACM,OAAN,GAAc,CAAvC,EAA0CH,QAA1C,CAAmDS,KAAnD,CAAyDF,KAAjG;AACD,GAJO,CAAR;AAMA,SACE;AAAM,IAAA,GAAG,EAAET,GAAX;AAAgB,IAAA,KAAK,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,GAAG,EAAEC,QAFP;AAGE,IAAA,cAAc,EAAEL,cAHlB;AAIE,IAAA,YAAY,EAAEC,YAJhB;AAKE,IAAA,QAAQ,EAAEK,QALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAYD;;AAED,eAAeJ,IAAf","sourcesContent":["import React, { useRef, useMemo } from 'react';\nimport { fApi, uApi } from '../utils/index.js'\nimport {useFrame} from 'react-three-fiber'\nimport '../styles.css'\n\nconst fragmentShader = `\n  uniform sampler2D image;\n\n  uniform float brightness;\n  uniform float contrast;\n  varying vec2 vUv;\n  void main() {\n    gl_FragColor = texture2D(image, vUv);\n    gl_FragColor.rgb += brightness;\n\n    if (contrast > 0.0) {\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) / (1.0 - contrast) + 0.5;\n    } else {\n      gl_FragColor.rgb = (gl_FragColor.rgb - 0.5) * (1.0 + contrast) + 0.5;\n    }\n  }\n`;\n\nconst vertexShader = `\n  varying vec2 vUv;\n\n  void main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n  }\n`;\n\nfunction Mesh(props) {\n\n  const ref = useRef()\n  const material = useRef()\n\n  var uniforms = useMemo(\n    () =>\n      uApi.getState().channels[props.channel-1].uniforms,\n    []\n  )\n\n  useFrame(state => {\n    material.current.uniforms.brightness.value = uApi.getState().channels[props.channel-1].uniforms.brightness.value;\n    material.current.uniforms.contrast.value = uApi.getState().channels[props.channel-1].uniforms.contrast.value;\n    material.current.uniforms.image.value = uApi.getState().channels[props.channel-1].uniforms.image.value;\n  })\n\n  return (\n    <mesh ref={ref} scale={[1.0, 1.0, 1.0]}>\n      <planeBufferGeometry attach=\"geometry\" args={[5.0, 5.0]} />\n      <shaderMaterial\n        attach=\"material\"\n        ref={material}\n        fragmentShader={fragmentShader}\n        vertexShader={vertexShader}\n        uniforms={uniforms}\n      />\n    </mesh>\n  )\n}\n\nexport default Mesh;\n"]},"metadata":{},"sourceType":"module"}