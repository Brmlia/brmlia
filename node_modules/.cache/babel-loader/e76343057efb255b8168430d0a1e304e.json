{"ast":null,"code":"var _jsxFileName = \"/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/simple/Test.js\";\nimport React, { useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Canvas, useFrame } from 'react-three-fiber';\nvar vertexShader = \"\\nvoid main() {\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n\";\nvar fragmentShader = \"\\nprecision highp float;\\nuniform float u_time;\\nvoid main() {\\n  gl_FragColor = vec4(u_time, u_time, u_time, 1.0);\\n}\\n\";\nvar uniforms = {\n  u_time: {\n    type: 'f',\n    value: 0\n  }\n};\n\nfunction Scene() {\n  var material = useRef();\n  var t = 0;\n  useFrame(function () {\n    material.current.uniforms.u_time.value = t = (t + 0.01) % 1;\n    console.log(\"Test::useFrame() - t:\", t);\n  });\n  return React.createElement(\"mesh\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"planeBufferGeometry\", {\n    attach: \"geometry\",\n    args: [4, 4],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"shaderMaterial\", {\n    attach: \"material\",\n    ref: material,\n    uniforms: uniforms,\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }));\n}\n\nexport default Scene;","map":{"version":3,"sources":["/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/simple/Test.js"],"names":["React","useRef","ReactDOM","Canvas","useFrame","vertexShader","fragmentShader","uniforms","u_time","type","value","Scene","material","t","current","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,mBAAjC;AAEA,IAAMC,YAAY,oGAAlB;AAMA,IAAMC,cAAc,6HAApB;AAQA,IAAMC,QAAQ,GAAG;AAAEC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,IAAI,EAAE,GAAR;AAAaC,IAAAA,KAAK,EAAE;AAApB;AAAV,CAAjB;;AAEA,SAASC,KAAT,GAAiB;AACf,MAAMC,QAAQ,GAAGX,MAAM,EAAvB;AAEA,MAAIY,CAAC,GAAG,CAAR;AACAT,EAAAA,QAAQ,CAAC,YAAM;AAACQ,IAAAA,QAAQ,CAACE,OAAT,CAAiBP,QAAjB,CAA0BC,MAA1B,CAAiCE,KAAjC,GAAyCG,CAAC,GAAG,CAACA,CAAC,GAAG,IAAL,IAAa,CAA1D;AAA6DE,IAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCH,CAArC;AAAwC,GAA7G,CAAR;AAGA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAqB,IAAA,MAAM,EAAC,UAA5B;AAAuC,IAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AACE,IAAA,MAAM,EAAC,UADT;AAEE,IAAA,GAAG,EAAED,QAFP;AAGE,IAAA,QAAQ,EAAEL,QAHZ;AAIE,IAAA,YAAY,EAAEF,YAJhB;AAKE,IAAA,cAAc,EAAEC,cALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAYD;;AAED,eAAeK,KAAf","sourcesContent":["import React, { useRef } from 'react'\nimport ReactDOM from 'react-dom'\nimport { Canvas, useFrame } from 'react-three-fiber'\n\nconst vertexShader = `\nvoid main() {\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`\n\nconst fragmentShader = `\nprecision highp float;\nuniform float u_time;\nvoid main() {\n  gl_FragColor = vec4(u_time, u_time, u_time, 1.0);\n}\n`\n\nconst uniforms = { u_time: { type: 'f', value: 0 } }\n\nfunction Scene() {\n  const material = useRef()\n\n  let t = 0\n  useFrame(() => {material.current.uniforms.u_time.value = t = (t + 0.01) % 1; console.log(\"Test::useFrame() - t:\", t)}\n  )\n\n  return (\n    <mesh>\n      <planeBufferGeometry attach=\"geometry\" args={[4, 4]} />\n      <shaderMaterial\n        attach=\"material\"\n        ref={material}\n        uniforms={uniforms}\n        vertexShader={vertexShader}\n        fragmentShader={fragmentShader}\n      />\n    </mesh>\n  )\n}\n\nexport default Scene;"]},"metadata":{},"sourceType":"module"}