{"ast":null,"code":"import _objectSpread from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/TestImageComponent.js\";\nimport React from \"react\";\nimport Image from \"./TestImage.js\";\nimport TestImageWrapper from \"./TestImageWrapper.js\";\nimport { Canvas } from 'react-three-fiber';\nimport Slider from \"./../../components/slider.js\";\nimport { withUniformStore } from '../../components/utils.js';\nimport * as THREE from 'three'; //import { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js';\n\nimport { RectAreaLight, RectAreaLightHelper, RectAreaLightUniformsLib } from \"three\";\n\nvar TestImageComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(TestImageComponent, _React$Component);\n\n  function TestImageComponent() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TestImageComponent);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TestImageComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      slider: {\n        brightness: '0.0',\n        contrast: '0.0'\n      }\n    };\n    _this.api = _this.props.api;\n    return _this;\n  }\n\n  _createClass(TestImageComponent, [{\n    key: \"updateBrightness\",\n    value: function updateBrightness() {\n      var _this2 = this;\n\n      if (this.api.getState().uniforms.brightness) {\n        if (this.state.slider.brightness !== this.api.getState().uniforms.brightness.value) {\n          this.api.setState(function (prevState) {\n            return {\n              uniforms: _objectSpread({}, prevState.uniforms, {\n                brightness: {\n                  value: _this2.state.slider.brightness\n                }\n              })\n            };\n          });\n        }\n\n        return true;\n      } else {\n        console.log(\"null state\", this.api.getState());\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateContrast\",\n    value: function updateContrast() {\n      var _this3 = this;\n\n      if (this.api.getState().uniforms.contrast) {\n        if (this.state.slider.contrast !== this.api.getState().uniforms.contrast.value) {\n          this.api.setState(function (prevState) {\n            return {\n              uniforms: _objectSpread({}, prevState.uniforms, {\n                contrast: {\n                  value: _this3.state.slider.contrast\n                }\n              })\n            };\n          });\n        }\n\n        return true;\n      } else {\n        console.log(\"null state\", this.api.getState());\n      }\n\n      return false;\n    }\n  }, {\n    key: \"sliderValueBr\",\n    value: function sliderValueBr(value) {\n      this.setState(function (prevState) {\n        return {\n          slider: _objectSpread({}, prevState.slider, {\n            brightness: value\n          })\n        };\n      });\n      this.updateBrightness();\n      console.log(\"sliderValueBr() - ch br: \" + this.state.slider.brightness + \" ch ct: \" + this.state.slider.contrast);\n    }\n  }, {\n    key: \"sliderValueCt\",\n    value: function sliderValueCt(value) {\n      this.setState(function (prevState) {\n        return {\n          slider: _objectSpread({}, prevState.slider, {\n            contrast: value\n          })\n        };\n      });\n      this.updateContrast();\n      console.log(\"sliderValueCt() - ch br: \" + this.state.slider.brightness + \" ch ct: \" + this.state.slider.contrast);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // Create the scene and a camera to view it\n      var catScene = new THREE.Scene();\n      /**\n      * Camera\n      **/\n      // Specify the portion of the scene visiable at any time (in degrees)\n\n      var fieldOfView = 75; // Specify the camera's aspect ratio\n\n      var aspectRatio = window.innerWidth / window.innerHeight; // Specify the near and far clipping planes. Only objects\n      // between those planes will be rendered in the scene\n      // (these values help control the number of items rendered\n      // at any given time)\n\n      var nearPlane = 0.1;\n      var farPlane = 1000; // Use the values specified above to create a camera\n\n      var camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane); // Finally, set the camera's position in the z-dimension\n\n      camera.position.z = 5; ////////////    flower picture\n      //var canvas = document.getElementById('imageCanvas');\n      //var context = canvas.getContext('2d');\n      ////////////    flower picture\n\n      /**\n      * Renderer\n      **/\n      // Create the canvas with a renderer\n\n      var renderer = new THREE.WebGLRenderer({\n        antialias: true\n      }); //var renderer = new THREE.WebGLRenderer({alpha: true});\n      // Specify the size of the canvas\n\n      renderer.setSize(window.innerWidth, window.innerHeight); // From Stack overflow\n      //renderer.autoClear = false; // important!\n\n      renderer.setViewport(0, 0, window.innerWidth, window.innerHeight); // Add the canvas to the DOM\n\n      document.body.appendChild(renderer.domElement);\n      /**\n      * Image\n      **/\n      // Create a texture loader so we can load our image file\n\n      var loader = new THREE.TextureLoader(); // Load an image file into a custom material\n\n      var material = new THREE.MeshLambertMaterial({\n        map: loader.load('https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg')\n      }); // create a plane geometry for the image with a width of 10\n      // and a height that preserves the image's aspect ratio\n\n      var geometry = new THREE.PlaneGeometry(10, 10 * .75); // combine our image geometry and material into a mesh\n\n      var mesh = new THREE.Mesh(geometry, material); // set the position of the image mesh in the x,y,z dimensions\n\n      mesh.position.set(0, 0, 0); // RectAreaLight\n      // RectAreaLightUniformsLib.init();\n      // const color = 0xFFFFFF;\n      // const intensity = 5;\n      // const width = 12;\n      // const height = 4;\n      // const light_r = new THREE.RectAreaLight(color, intensity, width, height);\n      // light_r.position.set(0, 10, 0);\n      // light_r.rotation.x = THREE.MathUtils.degToRad(-90);\n      //catScene.add(mesh);\n      //catScene.add(light_r);\n      //const helper = new RectAreaLightHelper(light_r);\n      //light_r.add(helper);\n      // add the image to the scene\n\n      catScene.add(mesh);\n      /**\n      * Lights\n      **/\n      // Add a point light with #fff color, .7 intensity, and 0 distance\n\n      var light = new THREE.PointLight(0xffffff, 1, 0); // Specify the light's position\n\n      light.position.set(1, 1, 100); ////////////////////////////////////////////////////////////// LAYERS\n      //light.layers.enable( 0 );\n      //light.layers.enable( 1 );\n      //var object = new THREE.Mesh( geometry, mesh );\n      ////////////////////////////////////////////////////////////// LAYERS\n      // Add the light to the scene\n      //catScene.add(light)\n      //var camera2 = new THREE.PerspectiveCamera( 45, 1, 1, 500 );\n\n      var camera2 = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 2000);\n      camera2.position.set(0, 0, 100);\n      camera2.lookAt(0, 0, 0);\n      var sceneBox = new THREE.Scene();\n      sceneBox.background = new THREE.Color(0xff0000);\n      var boxMaterial = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      });\n      var points = [];\n      points.push(new THREE.Vector3(-3, 0, 0));\n      points.push(new THREE.Vector3(-3, 3, 0));\n      points.push(new THREE.Vector3(0, 3, 0));\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(-3, 0, 0));\n      var geometry2 = new THREE.BufferGeometry().setFromPoints(points); //var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n\n      var lineOnCat = new THREE.Line(geometry2, boxMaterial);\n      sceneBox.add(lineOnCat);\n      points = [];\n      points.push(new THREE.Vector3(-4, 0, 0));\n      points.push(new THREE.Vector3(-4, 4, 0));\n      points.push(new THREE.Vector3(0, 4, 0));\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(-4, 0, 0));\n      var geometry5 = new THREE.BufferGeometry().setFromPoints(points); //var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n\n      var lineOnCat2 = new THREE.Line(geometry5, boxMaterial);\n      sceneBox.add(lineOnCat2); // Add a point light with #fff color, .7 intensity, and 0 distance\n\n      var light2 = new THREE.PointLight(0xffffff, 1, 0); // Specify the light's position\n\n      light2.position.set(1, 1, 100); // Add the light to the scene\n\n      sceneBox.add(light2); //light.layers.enable( 1 )\n      //light.layers.enable( 0 )\n\n      var meshLayers = new THREE.Mesh(geometry, material);\n      sceneBox.add(meshLayers);\n\n      function animate() {\n        requestAnimationFrame(animate); //renderer.render( catScene, camera );\n        //renderer.setClearColor(0xffffff, 0);\n        //renderer.clearDepth();\n\n        renderer.render(sceneBox, camera2);\n      }\n\n      animate();\n      var sliderValueBr = this.sliderValueBr;\n      var sliderValueCt = this.sliderValueCt;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(TestImageWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        label: \"Brightness\",\n        width: \"40%\",\n        min: \"0\",\n        max: \"1\",\n        step: \"0.1\",\n        initial: \"0\",\n        multiplier: \"100\",\n        sliderValue: sliderValueBr.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(Slider, {\n        label: \"Contrast\",\n        width: \"40%\",\n        min: \"0\",\n        max: \"10\",\n        step: \"1\",\n        initial: \"0\",\n        multiplier: \"10\",\n        sliderValue: sliderValueCt.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TestImageComponent;\n}(React.Component);\n\nexport default withUniformStore(TestImageComponent);","map":{"version":3,"sources":["/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/TestImageComponent.js"],"names":["React","Image","TestImageWrapper","Canvas","Slider","withUniformStore","THREE","RectAreaLight","RectAreaLightHelper","RectAreaLightUniformsLib","TestImageComponent","state","slider","brightness","contrast","api","props","getState","uniforms","value","setState","prevState","console","log","updateBrightness","updateContrast","catScene","Scene","fieldOfView","aspectRatio","window","innerWidth","innerHeight","nearPlane","farPlane","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","setSize","setViewport","document","body","appendChild","domElement","loader","TextureLoader","material","MeshLambertMaterial","map","load","geometry","PlaneGeometry","mesh","Mesh","set","add","light","PointLight","camera2","lookAt","sceneBox","background","Color","boxMaterial","LineBasicMaterial","color","points","push","Vector3","geometry2","BufferGeometry","setFromPoints","lineOnCat","Line","geometry5","lineOnCat2","light2","meshLayers","animate","requestAnimationFrame","render","sliderValueBr","sliderValueCt","bind","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Image from \"./TestImage.js\";\nimport TestImageWrapper from \"./TestImageWrapper.js\";\nimport { Canvas } from 'react-three-fiber'\nimport Slider from \"./../../components/slider.js\"\nimport { withUniformStore } from '../../components/utils.js'\n\nimport * as THREE from 'three';\n//import { RectAreaLightUniformsLib } from 'three/examples/jsm/lights/RectAreaLightUniformsLib.js';\nimport {RectAreaLight, RectAreaLightHelper, RectAreaLightUniformsLib} from \"three\";\n\n\nclass TestImageComponent extends React.Component {\n\n  state = {\n    slider: {\n      brightness: '0.0',\n      contrast: '0.0'\n    }\n  }\n\n  api = this.props.api;\n\n  updateBrightness() {\n    if (this.api.getState().uniforms.brightness) {\n      if (this.state.slider.brightness !== this.api.getState().uniforms.brightness.value){\n        this.api.setState( prevState => ({\n          uniforms: {\n            ...prevState.uniforms,\n            brightness: {\n              value: this.state.slider.brightness\n            }\n          }\n        }));\n      }\n      return true;\n    }\n    else {\n      console.log(\"null state\", this.api.getState())\n    }\n    return false;\n  }\n\n  updateContrast() {\n    if (this.api.getState().uniforms.contrast) {\n      if (this.state.slider.contrast !== this.api.getState().uniforms.contrast.value){\n        this.api.setState( prevState => ({\n          uniforms: {\n            ...prevState.uniforms,\n            contrast: {\n              value: this.state.slider.contrast\n            }\n          }\n        }));\n      }\n      return true;\n    }\n    else {\n      console.log(\"null state\", this.api.getState())\n    }\n    return false;\n  }\n\n  sliderValueBr(value) {\n    this.setState( prevState => ({\n      slider: {\n        ...prevState.slider,\n        brightness: value\n      }\n    }));\n\n    this.updateBrightness()\n    console.log(\"sliderValueBr() - ch br: \" + this.state.slider.brightness + \" ch ct: \" + this.state.slider.contrast);\n  }\n\n  sliderValueCt(value) {\n    this.setState( prevState => ({\n      slider: {\n        ...prevState.slider,\n        contrast: value\n      }\n    }));\n    this.updateContrast()\n    console.log(\"sliderValueCt() - ch br: \" + this.state.slider.brightness + \" ch ct: \" + this.state.slider.contrast);\n  }\n\n  render() {\n\n    // Create the scene and a camera to view it\nvar catScene = new THREE.Scene();\n\n/**\n* Camera\n**/\n\n// Specify the portion of the scene visiable at any time (in degrees)\nvar fieldOfView = 75;\n\n// Specify the camera's aspect ratio\nvar aspectRatio = window.innerWidth / window.innerHeight;\n\n// Specify the near and far clipping planes. Only objects\n// between those planes will be rendered in the scene\n// (these values help control the number of items rendered\n// at any given time)\nvar nearPlane = 0.1;\nvar farPlane = 1000;\n\n// Use the values specified above to create a camera\nvar camera = new THREE.PerspectiveCamera(\n  fieldOfView, aspectRatio, nearPlane, farPlane\n);\n\n// Finally, set the camera's position in the z-dimension\ncamera.position.z = 5;\n\n////////////    flower picture\n\n//var canvas = document.getElementById('imageCanvas');\n//var context = canvas.getContext('2d');\n\n////////////    flower picture\n\n\n/**\n* Renderer\n**/\n\n// Create the canvas with a renderer\nvar renderer = new THREE.WebGLRenderer({antialias: true});\n//var renderer = new THREE.WebGLRenderer({alpha: true});\n\n// Specify the size of the canvas\nrenderer.setSize( window.innerWidth, window.innerHeight );\n\n// From Stack overflow\n//renderer.autoClear = false; // important!\nrenderer.setViewport( 0, 0, window.innerWidth, window.innerHeight );\n\n// Add the canvas to the DOM\ndocument.body.appendChild( renderer.domElement );\n\n/**\n* Image\n**/\n\n// Create a texture loader so we can load our image file\nvar loader = new THREE.TextureLoader();\n\n// Load an image file into a custom material\nvar material = new THREE.MeshLambertMaterial({\n  map: loader.load('https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg')\n});\n\n// create a plane geometry for the image with a width of 10\n// and a height that preserves the image's aspect ratio\nvar geometry = new THREE.PlaneGeometry(10, 10*.75);\n\n// combine our image geometry and material into a mesh\nvar mesh = new THREE.Mesh(geometry, material);\n\n// set the position of the image mesh in the x,y,z dimensions\nmesh.position.set(0,0,0)\n\n// RectAreaLight\n// RectAreaLightUniformsLib.init();\n// const color = 0xFFFFFF;\n// const intensity = 5;\n// const width = 12;\n// const height = 4;\n// const light_r = new THREE.RectAreaLight(color, intensity, width, height);\n// light_r.position.set(0, 10, 0);\n// light_r.rotation.x = THREE.MathUtils.degToRad(-90);\n\n//catScene.add(mesh);\n//catScene.add(light_r);\n\n//const helper = new RectAreaLightHelper(light_r);\n//light_r.add(helper);\n\n// add the image to the scene\ncatScene.add(mesh);\n\n/**\n* Lights\n**/\n\n// Add a point light with #fff color, .7 intensity, and 0 distance\nvar light = new THREE.PointLight( 0xffffff, 1, 0 );\n\n// Specify the light's position\nlight.position.set(1, 1, 100 );\n\n\n////////////////////////////////////////////////////////////// LAYERS\n\n//light.layers.enable( 0 );\n//light.layers.enable( 1 );\n\n//var object = new THREE.Mesh( geometry, mesh );\n\n////////////////////////////////////////////////////////////// LAYERS\n\n// Add the light to the scene\n//catScene.add(light)\n\n//var camera2 = new THREE.PerspectiveCamera( 45, 1, 1, 500 );\nvar camera2 = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 2000);\ncamera2.position.set( 0, 0, 100 );\ncamera2.lookAt( 0, 0, 0 );\n\n\n\nvar sceneBox = new THREE.Scene();\nsceneBox.background = new THREE.Color( 0xff0000 );\nvar boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n\nvar points = [];\npoints.push( new THREE.Vector3(-3,0,0));\npoints.push( new THREE.Vector3(-3,3,0));\npoints.push( new THREE.Vector3(0,3,0));\npoints.push( new THREE.Vector3(0,0,0));\npoints.push( new THREE.Vector3(-3,0,0));\n\nvar geometry2 = new THREE.BufferGeometry().setFromPoints( points );\n//var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\nvar lineOnCat = new THREE.Line( geometry2, boxMaterial );\nsceneBox.add( lineOnCat );\n\npoints = [];\npoints.push( new THREE.Vector3(-4,0,0));\npoints.push( new THREE.Vector3(-4,4,0));\npoints.push( new THREE.Vector3(0,4,0));\npoints.push( new THREE.Vector3(0,0,0));\npoints.push( new THREE.Vector3(-4,0,0));\n\nvar geometry5 = new THREE.BufferGeometry().setFromPoints( points );\n//var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\nvar lineOnCat2 = new THREE.Line( geometry5, boxMaterial );\nsceneBox.add( lineOnCat2 );\n\n// Add a point light with #fff color, .7 intensity, and 0 distance\nvar light2 = new THREE.PointLight( 0xffffff, 1, 0 );\n\n// Specify the light's position\nlight2.position.set(1, 1, 100 );\n\n// Add the light to the scene\nsceneBox.add(light2)\n\n//light.layers.enable( 1 )\n//light.layers.enable( 0 )\n\nvar meshLayers = new THREE.Mesh(geometry, material);\nsceneBox.add( meshLayers );\n\n\n\nfunction animate() {\nrequestAnimationFrame( animate );\n  //renderer.render( catScene, camera );\n  //renderer.setClearColor(0xffffff, 0);\n  //renderer.clearDepth();\n  renderer.render( sceneBox, camera2 );\n}\n\n\nanimate();\n\n\n\n\n    var sliderValueBr = this.sliderValueBr;\n    var sliderValueCt = this.sliderValueCt;\n    return (\n      <div>\n        <TestImageWrapper />\n        <Slider label=\"Brightness\" width=\"40%\" min=\"0\" max=\"1\" step=\"0.1\" initial=\"0\" multiplier=\"100\" sliderValue={sliderValueBr.bind(this)} />\n        <Slider label=\"Contrast\" width=\"40%\" min=\"0\" max=\"10\" step=\"1\" initial=\"0\" multiplier=\"10\" sliderValue={sliderValueCt.bind(this)} />\n      </div>\n    )\n  }\n}\nexport default withUniformStore(TestImageComponent);\n"]},"metadata":{},"sourceType":"module"}