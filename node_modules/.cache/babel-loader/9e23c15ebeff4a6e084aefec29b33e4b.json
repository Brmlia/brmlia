{"ast":null,"code":"import { useReducer, useRef, useEffect, useLayoutEffect } from 'react';\nvar useIsoLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nfunction create(createState) {\n  var state;\n  var listeners = new Set();\n\n  var setState = function setState(partial) {\n    var partialState = typeof partial === 'function' ? partial(state) : partial;\n\n    if (partialState !== state) {\n      state = Object.assign({}, state, partialState);\n      listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  };\n\n  var getState = function getState() {\n    return state;\n  };\n\n  var getSubscriber = function getSubscriber(listener) {\n    var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getState;\n    var equalityFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Object.is;\n    return {\n      currentSlice: selector(state),\n      equalityFn: equalityFn,\n      errored: false,\n      listener: listener,\n      selector: selector,\n      unsubscribe: function unsubscribe() {}\n    };\n  };\n\n  var subscribe = function subscribe(subscriber) {\n    function listener() {\n      // Selector or equality function could throw but we don't want to stop\n      // the listener from being called.\n      // https://github.com/react-spring/zustand/pull/37\n      try {\n        var newStateSlice = subscriber.selector(state);\n\n        if (!subscriber.equalityFn(subscriber.currentSlice, newStateSlice)) {\n          subscriber.listener(subscriber.currentSlice = newStateSlice);\n        }\n      } catch (error) {\n        subscriber.errored = true;\n        subscriber.listener(null, error);\n      }\n    }\n\n    listeners.add(listener);\n    return function () {\n      listeners.delete(listener);\n    };\n  };\n\n  var apiSubscribe = function apiSubscribe(listener, selector, equalityFn) {\n    return subscribe(getSubscriber(listener, selector, equalityFn));\n  };\n\n  var destroy = function destroy() {\n    return listeners.clear();\n  };\n\n  var useStore = function useStore() {\n    var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getState;\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.is;\n    var forceUpdate = useReducer(function (c) {\n      return c + 1;\n    }, 0)[1];\n    var subscriberRef = useRef();\n\n    if (!subscriberRef.current) {\n      subscriberRef.current = getSubscriber(forceUpdate, selector, equalityFn);\n      subscriberRef.current.unsubscribe = subscribe(subscriberRef.current);\n    }\n\n    var subscriber = subscriberRef.current;\n    var newStateSlice;\n    var hasNewStateSlice = false; // The selector or equalityFn need to be called during the render phase if\n    // they change. We also want legitimate errors to be visible so we re-run\n    // them if they errored in the subscriber.\n\n    if (subscriber.selector !== selector || subscriber.equalityFn !== equalityFn || subscriber.errored) {\n      // Using local variables to avoid mutations in the render phase.\n      newStateSlice = selector(state);\n      hasNewStateSlice = !equalityFn(subscriber.currentSlice, newStateSlice);\n    } // Syncing changes in useEffect.\n\n\n    useIsoLayoutEffect(function () {\n      if (hasNewStateSlice) {\n        subscriber.currentSlice = newStateSlice;\n      }\n\n      subscriber.selector = selector;\n      subscriber.equalityFn = equalityFn;\n      subscriber.errored = false;\n    });\n    useIsoLayoutEffect(function () {\n      return subscriber.unsubscribe;\n    }, []);\n    return hasNewStateSlice ? newStateSlice : subscriber.currentSlice;\n  };\n\n  var api = {\n    setState: setState,\n    getState: getState,\n    subscribe: apiSubscribe,\n    destroy: destroy\n  };\n  state = createState(setState, getState, api);\n  return [useStore, api];\n}\n\nexport default create;\nexport { create };","map":null,"metadata":{},"sourceType":"module"}