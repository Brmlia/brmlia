{"ast":null,"code":"import _classCallCheck from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React, { Component } from \"react\";\nimport { TestImageWrapper } from \"./TestImageWrapper.js\";\nimport Annotator from \"./ImageDraw.js\";\nimport Image from \"./TestImage.js\";\nimport { Canvas } from 'react-three-fiber';\nimport Slider from \"./../../components/slider.js\";\nimport { withUniformStore } from '../../components/utils.js';\nimport * as THREE from 'three';\n\nvar Annotator3 = /*#__PURE__*/function (_Component) {\n  _inherits(Annotator3, _Component);\n\n  function Annotator3(props) {\n    var _this;\n\n    _classCallCheck(this, Annotator3);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Annotator3).call(this, props));\n    _this.state = {\n      image: props.image\n    }; //var fu = new Image();\n\n    return _this;\n  }\n\n  _createClass(Annotator3, [{\n    key: \"render\",\n    value: function render() {\n      // Create the scene and a camera to view it\n      var catScene = new THREE.Scene();\n      /**\n      * Camera\n      **/\n      // Specify the portion of the scene visiable at any time (in degrees)\n\n      var fieldOfView = 75; // Specify the camera's aspect ratio\n\n      var aspectRatio = window.innerWidth / window.innerHeight; // Specify the near and far clipping planes. Only objects\n      // between those planes will be rendered in the scene\n      // (these values help control the number of items rendered\n      // at any given time)\n\n      var nearPlane = 0.1;\n      var farPlane = 1000; // Use the values specified above to create a camera\n\n      var camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane); // Finally, set the camera's position in the z-dimension\n\n      camera.position.z = 5;\n      /**\n      * Renderer\n      **/\n      // Create the canvas with a renderer\n\n      var renderer = new THREE.WebGLRenderer({\n        antialias: true\n      }); //var renderer = new THREE.WebGLRenderer({alpha: true});\n      // Specify the size of the canvas\n\n      renderer.setSize(window.innerWidth, window.innerHeight); // From Stack overflow\n      //renderer.autoClear = false; // important!\n\n      renderer.setViewport(0, 0, window.innerWidth, window.innerHeight); // Add the canvas to the DOM\n\n      document.body.appendChild(renderer.domElement);\n      /**\n      * Image\n      **/\n      // Create a texture loader so we can load our image file\n\n      var loader = new THREE.TextureLoader(); // Load an image file into a custom material\n\n      var material = new THREE.MeshLambertMaterial({\n        map: loader.load('https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg')\n      }); // var material = new THREE.MeshLambertMaterial({\n      //   map: loader.load('https://data.broadinstitute.org/bbbc/BBBC042/BBBC042_example2.png')\n      // });\n\n      var img = TestImageWrapper();\n      console.log(img); // create a plane geometry for the image with a width of 10\n      // and a height that preserves the image's aspect ratio\n\n      var geometry = new THREE.PlaneGeometry(100, 100 * .75); // combine our image geometry and material into a mesh\n\n      var mesh = new THREE.Mesh(geometry, material); // set the position of the image mesh in the x,y,z dimensions\n\n      mesh.position.set(0, 0, 0); // add the image to the scene\n\n      catScene.add(mesh); // Add a point light with #fff color, .7 intensity, and 0 distance\n\n      var light = new THREE.PointLight(0xffffff, 1, 0); // Specify the light's position\n\n      light.position.set(1, 1, 100);\n      var camera2 = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 2000);\n      camera2.position.set(0, 0, 100);\n      camera2.lookAt(0, 0, 0);\n      var sceneBox = new THREE.Scene();\n      sceneBox.background = new THREE.Color(0xff0000);\n      var boxMaterial = new THREE.LineBasicMaterial({\n        color: 0x0000ff\n      });\n      var points = [];\n      points.push(new THREE.Vector3(-3, 0, 0));\n      points.push(new THREE.Vector3(-3, 3, 0));\n      points.push(new THREE.Vector3(0, 3, 0));\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(-3, 0, 0));\n      var geometry2 = new THREE.BufferGeometry().setFromPoints(points); //var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n\n      var lineOnCat = new THREE.Line(geometry2, boxMaterial);\n      sceneBox.add(lineOnCat);\n      points = [];\n      points.push(new THREE.Vector3(-4, 0, 0));\n      points.push(new THREE.Vector3(-4, 4, 0));\n      points.push(new THREE.Vector3(0, 4, 0));\n      points.push(new THREE.Vector3(0, 0, 0));\n      points.push(new THREE.Vector3(-4, 0, 0));\n      var geometry5 = new THREE.BufferGeometry().setFromPoints(points); //var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n\n      var lineOnCat2 = new THREE.Line(geometry5, boxMaterial);\n      sceneBox.add(lineOnCat2); // Add a point light with #fff color, .7 intensity, and 0 distance\n\n      var light2 = new THREE.PointLight(0xffffff, 1, 0); // Specify the light's position\n\n      light2.position.set(1, 1, 100); // Add the light to the scene\n\n      sceneBox.add(light2);\n      var meshLayers = new THREE.Mesh(geometry, material);\n      sceneBox.add(meshLayers);\n\n      function animate() {\n        requestAnimationFrame(animate); //renderer.render( catScene, camera );\n        //renderer.setClearColor(0xffffff, 0);\n        //renderer.clearDepth();\n\n        renderer.render(sceneBox, camera2);\n      }\n\n      renderer.setClearColor(0xffffff, 0);\n      renderer.clearDepth();\n      animate();\n      return \"\";\n    }\n  }]);\n\n  return Annotator3;\n}(Component);\n\n;\nexport default Annotator3;","map":{"version":3,"sources":["/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/ImageThree.js"],"names":["React","Component","TestImageWrapper","Annotator","Image","Canvas","Slider","withUniformStore","THREE","Annotator3","props","state","image","catScene","Scene","fieldOfView","aspectRatio","window","innerWidth","innerHeight","nearPlane","farPlane","camera","PerspectiveCamera","position","z","renderer","WebGLRenderer","antialias","setSize","setViewport","document","body","appendChild","domElement","loader","TextureLoader","material","MeshLambertMaterial","map","load","img","console","log","geometry","PlaneGeometry","mesh","Mesh","set","add","light","PointLight","camera2","lookAt","sceneBox","background","Color","boxMaterial","LineBasicMaterial","color","points","push","Vector3","geometry2","BufferGeometry","setFromPoints","lineOnCat","Line","geometry5","lineOnCat2","light2","meshLayers","animate","requestAnimationFrame","render","setClearColor","clearDepth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {TestImageWrapper} from \"./TestImageWrapper.js\"\n\nimport Annotator from \"./ImageDraw.js\";\n\nimport Image from \"./TestImage.js\";\n\nimport { Canvas } from 'react-three-fiber';\nimport Slider from \"./../../components/slider.js\";\nimport { withUniformStore } from '../../components/utils.js';\n\nimport * as THREE from 'three';\n\nclass Annotator3 extends Component {\n\n    constructor(props)\n    {\n        super(props);\n        this.state = {\n        image: props.image,\n        };\n\n        //var fu = new Image();\n    }\n\n    render() {\n\n    // Create the scene and a camera to view it\n    var catScene = new THREE.Scene();\n\n    /**\n    * Camera\n    **/\n\n    // Specify the portion of the scene visiable at any time (in degrees)\n    var fieldOfView = 75;\n\n    // Specify the camera's aspect ratio\n    var aspectRatio = window.innerWidth / window.innerHeight;\n\n    // Specify the near and far clipping planes. Only objects\n    // between those planes will be rendered in the scene\n    // (these values help control the number of items rendered\n    // at any given time)\n    var nearPlane = 0.1;\n    var farPlane = 1000;\n\n    // Use the values specified above to create a camera\n    var camera = new THREE.PerspectiveCamera(\n      fieldOfView, aspectRatio, nearPlane, farPlane\n    );\n\n    // Finally, set the camera's position in the z-dimension\n    camera.position.z = 5;\n\n    /**\n    * Renderer\n    **/\n\n    // Create the canvas with a renderer\n    var renderer = new THREE.WebGLRenderer({antialias: true});\n    //var renderer = new THREE.WebGLRenderer({alpha: true});\n\n    // Specify the size of the canvas\n    renderer.setSize( window.innerWidth, window.innerHeight );\n\n    // From Stack overflow\n    //renderer.autoClear = false; // important!\n    renderer.setViewport( 0, 0, window.innerWidth, window.innerHeight );\n\n    // Add the canvas to the DOM\n    document.body.appendChild( renderer.domElement );\n\n    /**\n    * Image\n    **/\n\n    // Create a texture loader so we can load our image file\n    var loader = new THREE.TextureLoader();\n\n\n    // Load an image file into a custom material\n    var material = new THREE.MeshLambertMaterial({\n      map: loader.load('https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg')\n    });\n\n    // var material = new THREE.MeshLambertMaterial({\n    //   map: loader.load('https://data.broadinstitute.org/bbbc/BBBC042/BBBC042_example2.png')\n    // });\n    var img = TestImageWrapper();\n\n    console.log(img);\n\n    // create a plane geometry for the image with a width of 10\n    // and a height that preserves the image's aspect ratio\n    var geometry = new THREE.PlaneGeometry(100, 100*.75);\n\n    // combine our image geometry and material into a mesh\n    var mesh = new THREE.Mesh(geometry, material);\n\n    // set the position of the image mesh in the x,y,z dimensions\n    mesh.position.set(0,0,0)\n\n    // add the image to the scene\n    catScene.add(mesh);\n\n    // Add a point light with #fff color, .7 intensity, and 0 distance\n    var light = new THREE.PointLight( 0xffffff, 1, 0 );\n\n    // Specify the light's position\n    light.position.set(1, 1, 100 );\n\n    var camera2 = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 2000);\n    camera2.position.set( 0, 0, 100 );\n    camera2.lookAt( 0, 0, 0 );\n\n    var sceneBox = new THREE.Scene();\n    sceneBox.background = new THREE.Color( 0xff0000 );\n    var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n\n    var points = [];\n    points.push( new THREE.Vector3(-3,0,0));\n    points.push( new THREE.Vector3(-3,3,0));\n    points.push( new THREE.Vector3(0,3,0));\n    points.push( new THREE.Vector3(0,0,0));\n    points.push( new THREE.Vector3(-3,0,0));\n\n    var geometry2 = new THREE.BufferGeometry().setFromPoints( points );\n    //var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n    var lineOnCat = new THREE.Line( geometry2, boxMaterial );\n    sceneBox.add( lineOnCat );\n\n    points = [];\n    points.push( new THREE.Vector3(-4,0,0));\n    points.push( new THREE.Vector3(-4,4,0));\n    points.push( new THREE.Vector3(0,4,0));\n    points.push( new THREE.Vector3(0,0,0));\n    points.push( new THREE.Vector3(-4,0,0));\n\n    var geometry5 = new THREE.BufferGeometry().setFromPoints( points );\n    //var boxMaterial = new THREE.LineBasicMaterial({color: 0x0000ff});\n    var lineOnCat2 = new THREE.Line( geometry5, boxMaterial );\n    sceneBox.add( lineOnCat2 );\n\n    // Add a point light with #fff color, .7 intensity, and 0 distance\n    var light2 = new THREE.PointLight( 0xffffff, 1, 0 );\n\n    // Specify the light's position\n    light2.position.set(1, 1, 100 );\n\n    // Add the light to the scene\n    sceneBox.add(light2)\n\n    var meshLayers = new THREE.Mesh(geometry, material);\n    sceneBox.add( meshLayers );\n\n\n    function animate() {\n    requestAnimationFrame( animate );\n      //renderer.render( catScene, camera );\n      //renderer.setClearColor(0xffffff, 0);\n      //renderer.clearDepth();\n      renderer.render( sceneBox, camera2 );\n    }\n\n    renderer.setClearColor(0xffffff, 0);\n    renderer.clearDepth();\n\n\n    animate();\n\n    return (\"\"\n\n      )\n    }\n};\n\nexport default Annotator3;\n"]},"metadata":{},"sourceType":"module"}