{"ast":null,"code":"import _slicedToArray from \"/Users/ramiroochoa/Desktop/brmlia/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/TestImageWrapper.js\";\nimport React, { useState } from \"react\";\nimport Image from \"./TestImage.js\";\nimport { Canvas } from 'react-three-fiber';\nimport { useSpring, a } from 'react-spring/three'; // function component\n\nexport default function TestImageWrapper() {\n  var Box = function Box() {\n    var _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        hovered = _useState2[0],\n        setHovered = _useState2[1];\n\n    var _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        active = _useState4[0],\n        setActive = _useState4[1];\n\n    var props = useSpring();\n    return React.createElement(Canvas, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"mesh\", {\n      onPointerOver: function onPointerOver() {\n        return setHovered(true);\n      },\n      onPointerOut: function onPointerOut() {\n        return setHovered(false);\n      },\n      onClick: function onClick() {\n        return setActive(!active);\n      },\n      scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, React.createElement(\"boxBufferGeometry\", {\n      attach: \"geometry\",\n      args: [1, 1, 1],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }), React.createElement(\"meshBasicMaterial\", {\n      attach: \"material\",\n      color: hovered ? \"hotpink\" : \"gray\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    })));\n  };\n}","map":{"version":3,"sources":["/Users/ramiroochoa/Desktop/brmlia/src/imagecanvas/custom/TestImageWrapper.js"],"names":["React","useState","Image","Canvas","useSpring","a","TestImageWrapper","Box","hovered","setHovered","active","setActive","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,SAAT,EAAoBC,CAApB,QAA6B,oBAA7B,C,CAGA;;AAEA,eAAe,SAASC,gBAAT,GAA6B;AAI3C,MAAMC,GAAG,GAAG,SAANA,GAAM,GAAM;AAAA,oBAEcN,QAAQ,CAAC,KAAD,CAFtB;AAAA;AAAA,QAETO,OAFS;AAAA,QAEAC,UAFA;;AAAA,qBAGYR,QAAQ,CAAC,KAAD,CAHpB;AAAA;AAAA,QAGTS,MAHS;AAAA,QAGDC,SAHC;;AAIjB,QAAMC,KAAK,GAAGR,SAAS,EAAvB;AAEC,WACC,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACF;AACA,MAAA,aAAa,EAAE;AAAA,eAAMK,UAAU,CAAC,IAAD,CAAhB;AAAA,OADf;AAEA,MAAA,YAAY,EAAE;AAAA,eAAMA,UAAU,CAAC,KAAD,CAAhB;AAAA,OAFd;AAGA,MAAA,OAAO,EAAE;AAAA,eAAME,SAAS,CAAC,CAACD,MAAF,CAAf;AAAA,OAHT;AAIA,MAAA,KAAK,EAAEA,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAH,GAAqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASK;AAAmB,MAAA,MAAM,EAAC,UAA1B;AAAqC,MAAA,IAAI,EAAE,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATL,EAUK;AAAmB,MAAA,MAAM,EAAC,UAA1B;AAAqC,MAAA,KAAK,EAAEF,OAAO,GAAG,SAAH,GAAe,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVL,CADE,CADD;AAiBF,GAvBA;AAwBA","sourcesContent":["import React, { useState } from \"react\";\nimport Image from \"./TestImage.js\";\nimport { Canvas } from 'react-three-fiber'\nimport { useSpring, a } from 'react-spring/three';\n\n\n// function component\n\nexport default function TestImageWrapper () {\n\n\n\n\tconst Box = () => {\n\n\t\tconst  [hovered, setHovered] = useState(false);\n\t\tconst  [active, setActive] = useState(false);\n\t\tconst props = useSpring();\n\n \t\treturn (\n \t\t\t<Canvas >\n\t\t<mesh \n\t\tonPointerOver={() => setHovered(true)}\n\t\tonPointerOut={() => setHovered(false)}\n\t\tonClick={() => setActive(!active)}\n\t\tscale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n\n\t\t>\n\t    \n\t      \n\t      <boxBufferGeometry attach=\"geometry\" args={[1,1,1]} />\n\t      <meshBasicMaterial attach=\"material\" color={hovered ? \"hotpink\" : \"gray\"} />\n\t    </mesh>\n\n\t    </Canvas>\n\t\t)\n}\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}